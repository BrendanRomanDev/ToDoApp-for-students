{"version":3,"sources":["TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","styles","completed","this","props","console","log","id","className","onClick","markComplete","task","remove","icon","faTrash","Component","App","handleSubmit","evt","newTask","uuidv4","state","add","setState","index","todos","findIndex","todo","newTodoArr","handleChange","bind","taskId","filter","target","name","value","type","placeholder","onChange","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAGqBA,E,uKASV,IAAD,OACFC,EAAS,CACdC,UAAYC,KAAKC,MAAMF,UAAY,WAAa,cAIjD,OADAG,QAAQC,IAAIH,KAAKC,MAAMG,IAEtB,yBAAKC,UAAU,YACd,yBAAKC,QAAS,kBAAM,EAAKL,MAAMM,aAAa,EAAKN,MAAMG,KAAKC,UAAU,aACrE,yBAAKA,UAAS,iBAAYP,EAAOC,aACjC,yBAAKM,UAAS,oBAAeP,EAAOC,YAAcC,KAAKC,MAAMO,OAG9D,kBAAC,IAAD,CACCH,UAAU,aACVC,QAAS,kBAAM,EAAKL,MAAMQ,OAAO,EAAKR,MAAMG,KAC5CM,KAAMC,W,GAzB2BC,aCEjBC,G,wDACpB,WAAYZ,GAAQ,IAAD,8BAClB,cAAMA,IAqCPa,aAAe,SAACC,GACf,IAAMC,EAAU,CACfZ,GAAYa,cACZT,KAAY,EAAKU,MAAMV,KACvBT,WAAY,GAEb,EAAKoB,IAAIH,GACT,EAAKI,SAAS,CAAEZ,KAAM,MA7CJ,EAgDnBD,aAAe,SAACH,GACf,IAAMiB,EAAQ,EAAKH,MAAMI,MAAMC,WAAU,SAACC,GAAD,OAAUA,EAAKpB,KAAOA,KACzDqB,EAAU,YAAQ,EAAKP,MAAMI,OACnCG,EAAWJ,GAAX,eAAyBI,EAAWJ,GAApC,CAA4CtB,WAAY0B,EAAWJ,GAAOtB,YAC1E,EAAKqB,SAAS,CAAEE,MAAOG,KAlDvB,EAAKP,MAAQ,CACZV,KAAQ,GACRc,MAAQ,CACP,CACClB,GAAYa,cACZT,KAAY,aACZT,WAAY,GAEb,CACCK,GAAYa,cACZT,KAAY,iBACZT,WAAY,GAEb,CACCK,GAAYa,cACZT,KAAY,kBACZT,WAAY,KAIf,EAAK2B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKlB,OAAS,EAAKA,OAAOkB,KAAZ,gBAvBI,E,mDA0BZC,GACN5B,KAAKoB,SAAS,CAAEE,MAAOtB,KAAKkB,MAAMI,MAAMO,QAAO,SAACrB,GAAD,OAAUA,EAAKJ,KAAOwB,S,0BAGlEZ,GACHhB,KAAKoB,SAAL,eAAmBpB,KAAKkB,MAAxB,CAA+BI,MAAM,GAAD,mBAAOtB,KAAKkB,MAAMI,OAAlB,CAAyBN,S,mCAGjDD,GACZf,KAAKoB,SAAL,eAAiBL,EAAIe,OAAOC,KAAOhB,EAAIe,OAAOE,U,+BAoBrC,IAAD,OACR,OACC,yBAAK3B,UAAU,QACd,yBAAKA,UAAU,cACd,yCAED,yBAAKA,UAAU,aACd,yBAAKA,UAAU,gBACd,2BACC4B,KAAK,OACLC,YAAY,aACZH,KAAK,OACLC,MAAOhC,KAAKkB,MAAMV,KAClB2B,SAAUnC,KAAK0B,eAEhB,4BAAQrB,UAAU,aAAaC,QAASN,KAAKc,cAA7C,MAIAd,KAAKkB,MAAMI,MAAMc,KAAI,SAACZ,GAAD,OACrB,kBAAC,EAAD,CACCa,IAAKb,EAAKpB,GACVA,GAAIoB,EAAKpB,GACTI,KAAMgB,EAAKhB,KACXC,OAAQ,EAAKA,OACbV,UAAWyB,EAAKzB,UAChBQ,aAAc,EAAKA,wB,GAlFOK,cCOb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.6b0fd7f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nexport default class TodoItem extends Component {\r\n\t// constructor(props) {\r\n\t// \tsuper(props);\r\n\t// \tthis.handleRemove = this.handleRemove.bind(this);\r\n\t// }\r\n\t// handleRemove() {\r\n\t// \tthis.props.remove(this.props.id);\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconst styles = {\r\n\t\t\tcompleted : this.props.completed ? 'complete' : 'incomplete'\r\n\t\t};\r\n\r\n\t\tconsole.log(this.props.id);\r\n\t\treturn (\r\n\t\t\t<div className=\"item-div\">\r\n\t\t\t\t<div onClick={() => this.props.markComplete(this.props.id)} className=\"task-item\">\r\n\t\t\t\t\t<div className={`circle ${styles.completed}`} />\r\n\t\t\t\t\t<div className={`task-name ${styles.completed}`}>{this.props.task}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <button onClick={this.handleRemove}>example</button> */}\r\n\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\tclassName=\"trash-icon\"\r\n\t\t\t\t\tonClick={() => this.props.remove(this.props.id)}\r\n\t\t\t\t\ticon={faTrash}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport TodoItem from './TodoItem';\nimport './App.css';\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttask  : '',\n\t\t\ttodos : [\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Be Awesome',\n\t\t\t\t\tcompleted : false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Take out trash',\n\t\t\t\t\tcompleted : false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Jump rope homie',\n\t\t\t\t\tcompleted : false\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t}\n\n\tremove(taskId) {\n\t\tthis.setState({ todos: this.state.todos.filter((task) => task.id !== taskId) });\n\t}\n\n\tadd(newTask) {\n\t\tthis.setState({ ...this.state, todos: [ ...this.state.todos, newTask ] });\n\t}\n\n\thandleChange(evt) {\n\t\tthis.setState({ [evt.target.name]: evt.target.value });\n\t}\n\n\thandleSubmit = (evt) => {\n\t\tconst newTask = {\n\t\t\tid        : uuidv4(),\n\t\t\ttask      : this.state.task,\n\t\t\tcompleted : false\n\t\t};\n\t\tthis.add(newTask);\n\t\tthis.setState({ task: '' });\n\t};\n\n\tmarkComplete = (id) => {\n\t\tconst index = this.state.todos.findIndex((todo) => todo.id === id);\n\t\tconst newTodoArr = [ ...this.state.todos ];\n\t\tnewTodoArr[index] = { ...newTodoArr[index], completed: !newTodoArr[index].completed };\n\t\tthis.setState({ todos: newTodoArr });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"card-title\">\n\t\t\t\t\t<h2>ToDoCamp</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<div className=\"add-item-div\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Add A Task\"\n\t\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button className=\"add-button\" onClick={this.handleSubmit}>\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.todos.map((todo) => (\n\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\tid={todo.id}\n\t\t\t\t\t\t\ttask={todo.task}\n\t\t\t\t\t\t\tremove={this.remove}\n\t\t\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\t\t\tmarkComplete={this.markComplete}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}