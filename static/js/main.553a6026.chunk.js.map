{"version":3,"sources":["TodoItem.js","TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","toggleform","setState","isEditing","state","handleUpdate","handleComplete","markComplete","id","handleRemove","remove","handleChange","evt","target","name","value","update","task","styles","completed","this","className","type","onChange","onClick","icon","faTimesCircle","faCheckCircle","faPencilAlt","faTrash","Component","TodoForm","handleSubmitTask","newTask","uuidv4","add","bind","placeholder","App","todos","updatedTask","updatedTodos","map","todo","index","findIndex","newTodoArr","taskId","filter","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.553a6026.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt, faTimesCircle, faCheckCircle, faThList } from '@fortawesome/free-solid-svg-icons';\r\nexport default class TodoItem extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttask      : this.props.task,\r\n\t\t\tisEditing : false\r\n\t\t};\r\n\t\t// this.handleRemove = this.handleRemove.bind(this);\r\n\t}\r\n\r\n\ttoggleform = () => this.setState({ isEditing: !this.state.isEditing });\r\n\thandleUpdate = () => {\r\n\t\t//take new task data and pass up to parent\r\n\t};\r\n\r\n\t// handleRemove() {\r\n\t// \tthis.props.remove(this.props.id);\r\n\t// }\r\n\thandleComplete = () => {\r\n\t\tthis.props.markComplete(this.props.id);\r\n\t};\r\n\r\n\thandleRemove = () => {\r\n\t\tthis.props.remove(this.props.id);\r\n\t};\r\n\r\n\thandleChange = (evt) => {\r\n\t\tthis.setState({ [evt.target.name]: evt.target.value });\r\n\t};\r\n\r\n\thandleUpdate = () => {\r\n\t\tthis.props.update(this.props.id, this.state.task);\r\n\t\tthis.setState({ task: this.state.task });\r\n\t\tthis.toggleform();\r\n\t};\r\n\r\n\trender() {\r\n\t\tlet result;\r\n\t\tconst styles = {\r\n\t\t\tcompleted : this.props.completed ? 'complete' : 'incomplete'\r\n\t\t};\r\n\t\tif (this.state.isEditing) {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"item-div\">\r\n\t\t\t\t\t<div className=\"item-form-div\">\r\n\t\t\t\t\t\t<input type=\"text\" name=\"task\" onChange={this.handleChange} value={this.state.task} />\r\n\t\t\t\t\t\t<div className=\"edit-btn-div\">\r\n\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\tclassName=\"edit-btn cancel\"\r\n\t\t\t\t\t\t\t\tonClick={this.toggleform}\r\n\t\t\t\t\t\t\t\ticon={faTimesCircle}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\tclassName=\"edit-btn save\"\r\n\t\t\t\t\t\t\t\tonClick={this.handleUpdate}\r\n\t\t\t\t\t\t\t\ticon={faCheckCircle}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"item-div\">\r\n\t\t\t\t\t<div onClick={this.handleComplete} className=\"task-item\">\r\n\t\t\t\t\t\t<div className={`circle ${styles.completed}`} />\r\n\t\t\t\t\t\t<div className={`task-name ${styles.completed}`}>{this.props.task}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* <button onClick={this.handleRemove}>example</button> */}\r\n\t\t\t\t\t<FontAwesomeIcon className=\"pencil-icon\" onClick={this.toggleform} icon={faPencilAlt} />\r\n\t\t\t\t\t<FontAwesomeIcon className=\"trash-icon\" onClick={this.handleRemove} icon={faTrash} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass TodoForm extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttask : ''\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\thandleSubmitTask = (evt) => {\r\n\t\tconst newTask = {\r\n\t\t\tid        : uuidv4(),\r\n\t\t\ttask      : this.state.task,\r\n\t\t\tcompleted : false\r\n\t\t};\r\n\t\tthis.props.add(newTask);\r\n\t\tthis.setState({ task: '' });\r\n\t};\r\n\r\n\thandleChange(evt) {\r\n\t\tthis.setState({ [evt.target.name]: evt.target.value });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"add-item-div\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Add A Task\"\r\n\t\t\t\t\tname=\"task\"\r\n\t\t\t\t\tvalue={this.state.task}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className=\"add-button\" onClick={this.handleSubmitTask}>\r\n\t\t\t\t\t+\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos : [\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Be Awesome',\n\t\t\t\t\tcompleted : false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Take out trash',\n\t\t\t\t\tcompleted : false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid        : uuidv4(),\n\t\t\t\t\ttask      : 'Jump rope homie',\n\t\t\t\t\tcompleted : false\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\tthis.remove = this.remove.bind(this);\n\t}\n\n\tremove(taskId) {\n\t\tthis.setState({ todos: this.state.todos.filter((task) => task.id !== taskId) });\n\t}\n\n\tadd = (newTask) => {\n\t\tthis.setState({ ...this.state, todos: [ ...this.state.todos, newTask ] });\n\t};\n\n\tupdate = (id, updatedTask) => {\n\t\tconst updatedTodos = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, task: updatedTask };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t};\n\n\tmarkComplete = (id) => {\n\t\tconst index = this.state.todos.findIndex((todo) => todo.id === id);\n\t\tconst newTodoArr = [ ...this.state.todos ];\n\t\tnewTodoArr[index] = { ...newTodoArr[index], completed: !newTodoArr[index].completed };\n\t\tthis.setState({ todos: newTodoArr });\n\t};\n\n\trender() {\n\t\tlet dashboard;\n\t\tif (this.state.todos.length) {\n\t\t\tdashboard = (\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-title\">\n\t\t\t\t\t\t<h2>ToDoCamp</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<TodoForm add={this.add} />\n\t\t\t\t\t\t{this.state.todos.map((todo) => (\n\t\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\tid={todo.id}\n\t\t\t\t\t\t\t\ttask={todo.task}\n\t\t\t\t\t\t\t\tremove={this.remove}\n\t\t\t\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\t\t\t\tmarkComplete={this.markComplete}\n\t\t\t\t\t\t\t\tupdate={this.update}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\tdashboard = (\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-title\">\n\t\t\t\t\t\t<h2>ToDoCamp</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<TodoForm add={this.add} />\n\t\t\t\t\t\t<div className=\"item-div\">\n\t\t\t\t\t\t\t<div className=\"task-name muted\">Add Tasks...</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn dashboard;\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}